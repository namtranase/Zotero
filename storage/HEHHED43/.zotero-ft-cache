arXiv:1911.11929v1 [cs.CV] 27 Nov 2019

CSPNET: A NEW BACKBONE THAT CAN ENHANCE LEARNING CAPABILITY OF CNN

A PREPRINT

Chien-Yao Wang Institute of Information Science
Academia Sinica, Taiwan x102432003@yahoo.com.tw

Hong-Yuan Mark Liao Institute of Information Science
Academia Sinica, Taiwan liao@iis.sinica.edu.tw

I-Hau Yeh Elan Microelectronics Corporation, Taiwan
ihyeh@emc.com.tw

Yueh-Hua Wu∗ Institute of Information Science
Academia Sinica, Taiwan kriswu@iis.sinica.edu.tw

Ping-Yang Chen Department of Computer Science National Chiao Tung University, Taiwan pingyang.cs08g@nctu.edu.tw

Jun-Wei Hsieh College of Artiﬁcial Intelligence and Green Energy
National Chiao Tung University, Taiwan jwhsieh@nctu.edu.tw

November 28, 2019
ABSTRACT
Neural networks have enabled state-of-the-art approaches to achieve incredible results on computer vision tasks such as object detection. However, such success greatly relies on costly computation resources, which hinders people with cheap devices from appreciating the advanced technology. In this paper, we propose Cross Stage Partial Network (CSPNet) to mitigate the problem that previous works require heavy inference computations from the network architecture perspective. We attribute the problem to the duplicate gradient information within network optimization. The proposed networks respect the variability of the gradients by integrating feature maps from the beginning and the end of a network stage, which, in our experiments, reduces computations by 20% with equivalent or even superior accuracy on the ImageNet dataset, and signiﬁcantly outperforms state-of-the-art approaches in terms of AP50 on the MS COCO object detection dataset. The CSPNet is easy to implement and general enough to cope with architectures based on ResNet, ResNeXt, and DenseNet. Source code is at https://github.com/WongKinYiu/CrossStagePartialNetworks.
1 Introduction
Neural networks have been shown to be especially powerful when it gets deeper [7, 39, 11] and wider [40]. However, extending the architecture of neural networks usually brings up a lot more computations, which makes computationally heavy tasks such as object detection unaffordable for most people. Light-weight computing has gradually received stronger attention since real-world applications usually require short inference time on small devices, which poses a serious challenge for computer vision algorithms. Although some approaches were designed exclusively for mobile CPU [9, 31, 8, 33, 43, 24], the depth-wise separable convolution techniques they adopted are not compatible with industrial IC design such as Application-Speciﬁc Integrated Circuit (ASIC) for edge-computing systems. In this work, we investigate the computational burden in state-of-the-art approaches such as ResNet, ResNeXt, and DenseNet. We
∗Corresponding author.

CSPNet: A New Backbone that can Enhance Learning Capability of CNN

A PREPRINT

Figure 1: Proposed CSPNet can be applied on ResNet [7], ResNeXt [39], DenseNet [11], etc. It not only reduce computation cost and memory usage of these networks, but also beneﬁt on inference speed and accuracy.
further develop computationally efﬁcient components that enable the mentioned networks to be deployed on both CPUs and mobile GPUs without sacriﬁcing the performance.
In this study, we introduce Cross Stage Partial Network (CSPNet). The main purpose of designing CSPNet is to enable this architecture to achieve a richer gradient combination while reducing the amount of computation. This aim is achieved by partitioning feature map of the base layer into two parts and then merging them through a proposed cross-stage hierarchy. Our main concept is to make the gradient ﬂow propagate through different network paths by splitting the gradient ﬂow. In this way, we have conﬁrmed that the propagated gradient information can have a large correlation difference by switching concatenation and transition steps. In addition, CSPNet can greatly reduce the amount of computation, and improve inference speed as well as accuracy, as illustrated in Fig 1. The proposed CSPNet-based object detector deals with the following three problems: 1) Strengthening learning ability of a CNN The accuracy of existing CNN is greatly degraded after lightweightening, so we hope to strengthen CNN’s learning ability, so that it can maintain sufﬁcient accuracy while being lightweightening. The proposed CSPNet can be easily applied to ResNet, ResNeXt, and DenseNet. After applying CSPNet on the above mentioned networks, the computation effort can be reduced from 10% to 20%, but it outperforms ResNet [7], ResNeXt [39], DenseNet [11], HarDNet [1], Elastic [36], and Res2Net [5], in terms of accuracy, in conducting image classiﬁcation task on ImageNet [2].
2

CSPNet: A New Backbone that can Enhance Learning Capability of CNN

A PREPRINT

Figure 2: Illustrations of (a) DenseNet and (b) our proposed Cross Stage Partial DenseNet (CSPDenseNet). CSPNet separates feature map of the base layer into two part, one part will go through a dense block and a transition layer; the other one part is then combined with transmitted feature map to the next stage.
2) Removing computational bottlenecks Too high a computational bottleneck will result in more cycles to complete the inference process, or some arithmetic units will often idle. Therefore, we hope we can evenly distribute the amount of computation at each layer in CNN so that we can effectively upgrade the utilization rate of each computation unit and thus reduce unnecessary energy consumption. It is noted that the proposed CSPNet makes the computational bottlenecks of PeleeNet [37] cut into half. Moreover, in the MS COCO [18] dataset-based object detection experiments, our proposed model can effectively reduce 80% computational bottleneck when test on YOLOv3-based models. 3) Reducing memory costs The wafer fabrication cost of Dynamic Random-Access Memory (DRAM) is very expensive, and it also takes up a lot of space. If one can effectively reduce the memory cost, he/she will greatly reduce the cost of ASIC. In addition, a small area wafer can be used in a variety of edge computing devices. In reducing the use of memory usage, we adopt cross-channel pooling [6] to compress the feature maps during the feature pyramid generating process. In this way, the proposed CSPNet with the proposed object detector can cut down 75% memory usage on PeleeNet when generating feature pyramids. Since CSPNet is able to promote the learning capability of a CNN, we thus use smaller models to achieve better accuracy. Our proposed model can achieve 50% COCO AP50 at 109 fps on GTX 1080ti. Since CSPNet can effectively cut down a signiﬁcant amount of memory trafﬁc, our proposed method can achieve 40% COCO AP50 at 52 fps on Intel Core i9-9900K. In addition, since CSPNet can signiﬁcantly lower down the computational bottleneck and Exact Fusion Model (EFM) can effectively cut down the required memory bandwidth, our proposed method can achieve 42% COCO AP50 at 49 fps on Nvidia Jetson TX2.
2 Related work
CNN architectures design. In ResNeXt [39], Xie et al. ﬁrst demonstrate that cardinality can be more effective than the dimensions of width and depth. DenseNet [11] can signiﬁcantly reduce the number of parameters and computations due to the strategy of adopting a large number of reuse features. And it concatenates the output features of all preceding layers as the next input, which can be considered as the way to maximize cardinality. SparseNet [46] adjusts dense connection to exponentially spaced connection can effectively improve parameter utilization and thus result in better outcomes. Wang et al. further explain why high cardinality and sparse connection can improve the learning ability of the network by the concept of gradient combination and developed the partial ResNet (PRN) [35]. For improving the inference speed of CNN, Ma et al. [24] introduce four guidelines to be followed and design ShufﬂeNet-v2. Chao et al. [1] proposed a low memory trafﬁc CNN called Harmonic DenseNet (HarDNet) and a metric Convolutional Input/Output (CIO) which is an approximation of DRAM trafﬁc proportional to the real DRAM trafﬁc measurement. Real-time object detector. The most famous two real-time object detectors are YOLOv3 [29] and SSD [21]. Based on SSD, LRF [38] and RFBNet [19] can achieve state-of-the-art real-time object detection performance on GPU. Recently, anchor-free based object detector [3, 45, 13, 14, 42] has become main-stream object detection system. Two object detector of this sort are CenterNet [45] and CornerNet-Lite [14], and they both perform very well in terms of efﬁciency and efﬁcacy. For real-time object detection on CPU or mobile GPU, SSD-based Pelee [37], YOLOv3-based PRN [35], and Light-Head RCNN [17]-based ThunderNet [25] all receive excellent performance on object detection.
3

CSPNet: A New Backbone that can Enhance Learning Capability of CNN

A PREPRINT

3 Method
3.1 Cross Stage Partial Network
DenseNet. Figure 2 (a) shows the detailed structure of one-stage of the DenseNet proposed by Huang et al. [11]. Each stage of a DenseNet contains a dense block and a transition layer, and each dense block is composed of k dense layers. The output of the ith dense layer will be concatenated with the input of the ith dense layer, and the concatenated outcome will become the input of the (i + 1)th dense layer. The equations showing the above-mentioned mechanism can be expressed as:

(1)
where ∗ represents the convolution operator, and [x0, x1, ...] means to concatenate x0, x1, ..., and wi and xi are the weights and output of the ith dense layer, respectively. If one makes use of a backpropagation algorithm to update weights, the equations of weight updating can be written as:

(2)
where f is the function of weight updating, and gi represents the gradient propagated to the ith dense layer. We can ﬁnd that large amount of gradient information are reused for updating weights of different dense layers. This will result in different dense layers repeatedly learn copied gradient information. Cross Stage Partial DenseNet. The architecture of one-stage of the proposed CSPDenseNet is shown in Figure 2 (b). A stage of CSPDenseNet is composed of a partial dense block and a partial transition layer. In a partial dense block, the feature maps of the base layer in a stage are split into two parts through channel x0 = [x0, x0 ]. Between x0 and x0, the former is directly linked to the end of the stage, and the latter will go through a dense block. All steps involved in a partial transition layer are as follows: First, the output of dense layers, [x0 , x1, ..., xk], will undergo a transition layer. Second, the output of this transition layer, xT , will be concatenated with x0 and undergo another transition layer, and then generate output xU . The equations of feed-forward pass and weight updating of CSPDenseNet are shown in Equations 3 and 4, respectively.
(3)

(4)
We can see that the gradients coming from the dense layers are separately integrated. On the other hand, the feature map x0 that did not go through the dense layers is also separately integrated. As to the gradient information for updating weights, both sides do not contain duplicate gradient information that belongs to other sides.
4

CSPNet: A New Backbone that can Enhance Learning Capability of CNN

A PREPRINT

Overall speaking, the proposed CSPDenseNet preserves the advantages of DenseNet’s feature reuse characteristics, but at the same time prevents an excessively amount of duplicate gradient information by truncating the gradient ﬂow. This idea is realized by designing a hierarchical feature fusion strategy and used in a partial transition layer.
Partial Dense Block. The purpose of designing partial dense blocks is to 1.) increase gradient path: Through the split and merge strategy, the number of gradient paths can be doubled. Because of the cross-stage strategy, one can alleviate the disadvantages caused by using explicit feature map copy for concatenation; 2.) balance computation of each layer: usually, the channel number in the base layer of a DenseNet is much larger than the growth rate. Since the base layer channels involved in the dense layer operation in a partial dense block account for only half of the original number, it can effectively solve nearly half of the computational bottleneck; and 3.) reduce memory trafﬁc: Assume the base feature map size of a dense block in a DenseNet is w × h × c, the growth rate is d, and there are in total m dense layers. Then, the CIO of that dense block is (c × m) + ((m2 + m) × d)/2, and the CIO of partial dense block is ((c × m) + (m2 + m) × d)/2. While m and d are usually far smaller than c, a partial dense block is able to save at most half of the memory trafﬁc of a network.

Figure 3: Different kind of feature fusion strategies. (a) single path DenseNet, (b) proposed CSPDenseNet: transition → concatenation → transition, (c) concatenation → transition, and (d) transition → concatenation.
Partial Transition Layer. The purpose of designing partial transition layers is to maximize the difference of gradient combination. The partial transition layer is a hierarchical feature fusion mechanism, which uses the strategy of truncating the gradient ﬂow to prevent distinct layers from learning duplicate gradient information. Here we design two variations of CSPDenseNet to show how this sort of gradient ﬂow truncating affects the learning ability of a network. 3 (c) and 3 (d) show two different fusion strategies. CSP (fusion ﬁrst) means to concatenate the feature maps generated by two parts, and then do transition operation. If this strategy is adopted, a large amount of gradient information will be reused. As to the CSP (fusion last) strategy, the output from the dense block will go through the transition layer and then do concatenation with the feature map coming from part 1. If one goes with the CSP (fusion last) strategy, the gradient information will not be reused since the gradient ﬂow is truncated. If we use the four architectures shown in 3 to perform image classiﬁcation, the corresponding results are shown in Figure 4. It can be seen that if one adopts the CSP (fusion last) strategy to perform image classiﬁcation, the computation cost is signiﬁcantly dropped, but the top-1 accuracy only drop 0.1%. On the other hand, the CSP (fusion ﬁrst) strategy does help the signiﬁcant drop in computation cost, but the top-1 accuracy signiﬁcantly drops 1.5%. By using the split and merge strategy across stages, we are able to effectively reduce the possibility of duplication during the information integration process. From the results shown in Figure 4, it is obvious that if one can effectively reduce the repeated gradient information, the learning ability of a network will be greatly improved.
Apply CSPNet to Other Architectures. CSPNet can be also easily applied to ResNet and ResNeXt, the architectures are shown in Figure 5. Since only half of the feature channels are going through Res(X)Blocks, there is no need to
5

CSPNet: A New Backbone that can Enhance Learning Capability of CNN

A PREPRINT

Figure 4: Effect of truncating gradient ﬂow for maximizing difference of gradient combination.
Figure 5: Applying CSPNet to ResNe(X)t.
introduce the bottleneck layer anymore. This makes the theoretical lower bound of the Memory Access Cost (MAC) when the FLoating-point OPerations (FLOPs) is ﬁxed.
3.2 Exact Fusion Model Looking Exactly to predict perfectly. We propose EFM that captures an appropriate Field of View (FoV) for each anchor, which enhances the accuracy of the one-stage object detector. For segmentation tasks, since pixel-level labels usually do not contain global information, it is usually more preferable to consider larger patches for better information retrieval [22]. However, for tasks like image classiﬁcation and object detection, some critical information can be obscure when observed from image-level and bounding box-level labels. Li et al. [15] found that CNN can be often distracted when it learns from image-level labels and concluded that it is one of the main reasons that two-stage object detectors outperform one-stage object detectors. Aggregate Feature Pyramid. The proposed EFM is able to better aggregate the initial feature pyramid. The EFM is based on YOLOv3 [29], which assigns exactly one bounding-box prior to each ground truth object. Each ground truth bounding box corresponds to one anchor box that surpasses the threshold IoU. If the size of an anchor box is equivalent to the FoV of the grid cell, then for the grid cells of the sth scale, the corresponding bounding box will be lower bounded by the (s − 1)th scale and upper bounded by the (s + 1)th scale. Therefore, the EFM assembles features from the three scales. Balance Computation. Since the concatenated feature maps from the feature pyramid are enormous, it introduces a great amount of memory and computation cost. To alleviate the problem, we incorporate the Maxout technique to compress the feature maps.
6

CSPNet: A New Backbone that can Enhance Learning Capability of CNN

A PREPRINT

Figure 6: Different feature pyramid fusion strategies. (a) Feature Pyramid Network (FPN): fuse features from current scale and previous scale. (b) Global Fusion Model (GFM): fuse features of all scales. (c) Exact Fusion Model (EFM): fuse features depand on anchor size.
4 Experiments
We will use ImageNet’s image classiﬁcation dataset [2] used in ILSVRC 2012 to validate our proposed CSPNet. Besides, we also use the MS COCO object detection dataset [18] to verify the proposed EFM. Details of the proposed architectures will be elaborated in the appendix.
4.1 Implementation Details
ImageNet. In ImageNet image classiﬁcation experiments, all hyper-parameters such as training steps, learning rate schedule, optimizer, data augmentation, etc., we all follow the settings deﬁned in Redmon et al. [29]. For ResNet-based models and ResNeXt-based models, we set 8000,000 training steps. As to DenseNet-based models, we set 1,600,000 training steps. We set the initial learning rate 0.1 and adopt the polynomial decay learning rate scheduling strategy. The momentum and weight decay are respectively set as 0.9 and 0.005. All architectures use a single GPU to train universally in the batch size of 128. Finally, we use the validation set of ILSVRC 2012 to validate our method.
MS COCO. In MS COCO object detection experiments, all hyper-parameters also follow the settings deﬁned in Redmon et al. [29]. Altogether we did 500,000 training steps. We adopt the step decay learning rate scheduling strategy and multiply with a factor 0.1 at the 400,000 steps and the 450,000 steps, respectively. The momentum and weight decay are respectively set as 0.9 and 0.0005. All architectures use a single GPU to execute multi-scale training in the batch size of 64. Finally, the COCO test-dev set is adopted to verify our method.
4.2 Ablation Experiments
Ablation study of CSPNet on ImageNet. In the ablation experiments conducted on the CSPNet, we adopt PeleeNet [37] as the baseline, and the ImageNet is used to verify the performance of the CSPNet. We use different partial ratios γ and the different feature fusion strategies for ablation study. Table 1 shows the results of ablation study on CSPNet. In Table 1, SPeleeNet and PeleeNeXt are, respectively, the architectures that introduce sparse connection and group convolution to PeleeNet. As to CSP (fusion ﬁrst) and CSP (fusion last), they are the two strategies proposed to validate the beneﬁts of a partial transition.
From the experimental results, if one only uses the CSP (fusion ﬁrst) strategy on the cross-stage partial dense block, the performance can be slightly better than SPeleeNet and PeleeNeXt. However, the partial transition layer designed to reduce the learning of redundant information can achieve very good performance. For example, when the computation is cut down by 21%, the accuracy only degrades by 0.1%. One thing to be noted is that when γ = 0.25, the computation is cut down by 11%, but the accuracy is increased by 0.1%. Compared to the baseline PeleeNet, the proposed CSPPeleeNet achieves the best performance, it can cut down 13% computation, but at the same time upgrade the accuracy by 0.2%. If we adjust the partial ratio to γ = 0.25, we are able to upgrade the accuracy by 0.8% and at the same time cut down 3% computation.
Ablation study of EFM on MS COCO. Next, we shall conduct an ablation study of EFM based on the MS COCO dataset. In this series of experiments, we compare three different feature fusion strategies shown in Figure 6. We choose two state-of-the-art lightweight models, PRN [35] and ThunderNet [25], to make comparison. PRN is the feature pyramid architecture used for comparison, and the ThunderNet with Context Enhancement Module (CEM) and Spatial Attention Module (SAM) are the global fusion architecture used for comparison. We design a Global Fusion Model (GFM) to compare with the proposed EFM. Moreover, GIoU [30], SPP, and SAM are also applied to EFM to conduct an ablation study. All experiment results listed in Table 2 adopt CSPPeleeNet as the backbone.
7

CSPNet: A New Backbone that can Enhance Learning Capability of CNN

A PREPRINT

Table 1: Ablation study of CSPNet on ImageNet.

Model

γ

two-way dense

partial dense

trans.

partial trans.

Top-1

BFLOPs

PeleeNet [37] SPeleeNet PeleeNeXt

- (sparse) - (group)

70.7 1.017 69.6 0.904 68.9 0.837

0.75 CSP (fusion ﬁrst) 0.5
0.25

68.4 0.649 69.2 0.755 70.0 0.861

0.75 CSP (fusion last) 0.5
0.25

69.2 0.716 70.6 0.804 70.8 0.902

0.75 CSPPeleeNet 0.5
0.25

70.4 0.800 70.9 0.888 71.5 0.986

Table 2: Ablation study of EFM on MS COCO.

Head

global fusion

exact fusion

atten.

BFLOPs

FPS

AP

AP50

AP75

PRN [35] PRN (swish) PRN-3l [35]

3.590 169 23.1 44.5 22.0 3.590 161 24.1 45.8 23.3 4.586 151 23.7 46.0 22.2

CEM [25] CEM (SAM) [25] GFM

4.049 148 23.8 45.4 22.6 4.165 144 24.1 46.0 23.1 4.605 134 24.3 46.2 23.3

EFM EFM (GIoU [30]) EFM (SAM) EFM (SPP)

4.868 4.868 5.068 4.863

132 26.4 48.6 26.3 132 27.1 45.9 28.2 129 26.8 49.0 26.7 128 26.2 48.5 25.7

As reﬂected in the experiment results, the proposed EFM is 2 fps slower than GFM, but its AP and AP50 are signiﬁcantly upgraded by 2.1% and 2.4%, respectively. Although the introduction of GIoU can upgrade AP by 0.7%, the AP50 is, however, signiﬁcantly degraded by 2.7%. However, for edge computing, what really matters is the number and locations of the objects rather than their coordinates. Therefore, we will not use GIoU training in the subsequent models. The attention mechanism used by SAM can get a better frame rate and AP compared with SPP’s increase of FoV mechanism, so we use EFM (SAM) as the ﬁnal architecture. In addition, although the CSPPeleeNet with swish activation can improve AP by 1%, its operation requires a lookup table on the hardware design to accelerate, we ﬁnally also abandoned the swish activation function.
4.3 ImageNet Image Classiﬁcation
We apply the proposed CSPNet to ResNet-10 [7], ResNeXt-50 [39], PeleeNet [37], and DenseNet-201-Elastic [36] and compare with state-of-the-art methods. The experimental results are shown in Table 3.
It is conﬁrmed by experimental results that no matter it is ResNet-based models, ResNeXt-based models, or DenseNetbased models, when the concept of CSPNet is introduced, the computational load is reduced at least by 10% and the accuracy is either remain unchanged or upgraded. Introducing the concept of CSPNet is especially useful for the improvement of lightweight models. For example, compared to ResNet-10, CSPResNet-10 can improve accuracy by 1.8%. As to PeleeNet and DenseNet-201-Elastic, CSPPeleeNet and CSPDenseNet-201-Elastic can respectively cut down 13% and 19% computation, and either upgrade a little bit or maintain the accuracy. As to the case of ResNeXt-50, CSPResNeXt-50 can cut down 22% computation and upgrade top-1 accuracy to 77.9%.
If compared with the state-of-the-art lightweight model – EfﬁcientNet-B0, although it can achieve 76.8% accuracy when the batch size is 2048, when the experiment environment is the same as ours, that is, only one GPU is used, EfﬁcientNetB0 can only reach 70.0% accuracy. In fact, the swish activation function and SE block used by EfﬁcientNet-B0 are not efﬁcient on the mobile GPU. A similar analysis has been conducted during the development of EfﬁcientNet-EdgeTPU.
8

CSPNet: A New Backbone that can Enhance Learning Capability of CNN

A PREPRINT

Table 3: Compare with state-of-the-art methods on ImageNet.

Model

#Parameter BFLOPs Top-1 Top-5

PeleeNet [37] PeleeNet-swish SEPeleeNet-swish CSPPeleeNet CSPPeleeNet-swish SECSPPeleeNet-swish SparsePeleeNet [46]

2.79M 2.79M 2.81M 2.83M 2.83M 2.85M 2.39M

1.017 70.7% 90.0% 1.017 71.5% 90.7% 1.017 72.1% 91.0% 0.888 (-13%) 70.9% 90.2% 0.888 (-13%) 71.7% 90.8% 0.888 (-13%) 72.4% 91.0% 0.904 69.6% 89.3%

EfﬁcientNet-B0* [34] EfﬁcientNet-B0** [34]

4.81M -

0.915 -

71.3% 90.4% 70.0% 88.9%

Darknet Reference [27] CSPDenseNet Reference CSPPeleeNet Reference

7.31M 3.48M 4.10M

0.96 0.886 1.103

61.1% 83.0% 65.7% 86.6% 68.9% 88.7%

ResNet-10 [7] CSPResNet-10

5.24M

2.273 63.5% 85.0%

2.73M 1.905 (-16%) 65.3% 86.5%

ResNeXt-50 [39] CSPResNeXt-50 HarDNet-138s [1] DenseNet-264-32 [11] ResNet-152 [7]

22.19M 20.50M 35.5M 27.21M 60.2M

10.11 77.8% 94.2% 7.93 (-22%) 77.9% 94.0%
13.4 77.8% 11.03 77.8% 93.9% 22.6 77.8% 93.6%

DenseNet-201-Elastic [36] 19.48M

8.77 77.9% 94.0%

CSPDenseNet-201-Elastic 20.17M 7.13 (-19%) 77.9% 94.0%

Res2Net-50 (10 crop) [5] 25.29M Res2NeXt-50 (10 crop) [5] 24.27M CSPResNeXt-50 (10 crop) 20.50M

8.4×10 8.4×10 7.9×10

78.0% 93.8% 78.2% 93.9% 78.2% 94.3%

1 EfﬁcientNet* is implemented by Darknet framework. 2 EfﬁcientNet** is trained by ofﬁcial code with batch size 256. 3 Swish activation function is presented by [4, 26]. 4 Squeeze-and-excitation (SE) network is presented by [10].

Here, for demonstrating the learning ability of CSPNet, we introduce swish and SE into CSPPeleeNet and then make a comparison with EfﬁcientNet-B0*. In this experiment, SECSPPeleeNet-swish cut down computation by 3% and upgrade 1.1% top-1 accuracy.
Proposed CSPResNeXt-50 is compared with ResNeXt-50 [39], ResNet-152 [7], DenseNet-264 [11], and HarDNet-138s [1], regardless of parameter quantity, amount of computation, and top-1 accuracy, CSPResNeXt-50 all achieve the best result. As to the 10-crop test, CSPResNeXt-50 also outperforms Res2Net-50 [5] and Res2NeXt-50 [5].
4.4 MS COCO Object Detection
In the task of object detection, we aim at three targeted scenarios: (1) real-time on GPU: we adopt CSPResNeXt50 with PANet (SPP) [20]; (2) real-time on mobile GPU: we adopt CSPPeleeNet, CSPPeleeNet Reference, and CSPDenseNet Reference with the proposed EFM (SAM); and (3) real-time on CPU: we adopt CSPPeleeNet Reference and CSPDenseNet Reference with PRN [35]. The comparisons between the above models and the state-of-the-art methods are listed in Table 4. As to the analysis on the inference speed of CPU and mobile GPU will be detailed in the next subsection.
If compared to object detectors running at 30∼100 fps, CSPResNeXt50 with PANet (SPP) achieves the best performance in AP, AP50 and AP75. They receive, respectively, 38.4%, 60.6%, and 41.6% detection rates. If compared to state-ofthe-art LRF [38] under the input image size 512×512, CSPResNeXt50 with PANet (SPP) outperforms ResNet101 with LRF by 0.7% AP, 1.5% AP50 and 1.1% AP75. If compared to object detectors running at 100∼200 fps, CSPPeleeNet with EFM (SAM) boosts 12.1% AP50 at the same speed as Pelee [37] and increases 4.1% [37] at the same speed as CenterNet [45].
If compared to very fast object detectors such as ThunderNet [25], YOLOv3-tiny [29], and YOLOv3-tiny-PRN [35], the proposed CSPDenseNetb Reference with PRN is the fastest. It can reach 400 fps frame rate, i.e., 133 fps faster
9

CSPNet: A New Backbone that can Enhance Learning Capability of CNN

A PREPRINT

Table 4: Compare with state-of-the-art methods on MSCOCO Object Detection.

Method

Backbone

YOLOv3 [29]

DarkNet53 [29]

YOLOv3 (SPP) [29] DarkNet53 [29]

LRF [38]

ResNet101 [7]

SSD [21]

HarDNet85 [1]

M2Det [44]

VGG16 [32]

PFPNet (R) [12] VGG16 [32]

DAFS [16]

VGG16 [32]

RFBNet [19]

VGG16 [32]

PANet (SPP) [20] CSPResNeXt50

SSD [21]

HarDNet68 [1]

LRF [38]

VGG16 [32]

PFPNet (S) [12] VGG16 [32]

ReﬁneDet [41]

VGG16 [32]

SSD [21]

VGG16 [32]

PANet (SPP) [20] CSPResNeXt50

CenterNet [45]

ResNet101 [7]

YOLOv3 [29]

DarkNet53 [29]

PANet (SPP) [20] CSPResNeXt50

TTFNet [23]

DarkNet53 [29]

YOLOv3 [29]

DarkNet53 [29]

PANet (SPP) [20] CSPResNeXt50

Size FPS BFLOPs #Parameter AP AP50 AP75 APS APM APL

608×608 30 608×608 30 512×512 31 512×512 32 320×320 33 320×320 33 512×512 35 512×512 35 608×608 35 512×512 38 512×512 38 300×300 39 320×320 40 300×300 44 512×512 44 512×512 45 416×416 46 416×416 53 512×512 54 320×320 56 320×320 58

140.7 141.5
100.6 70.4 71.3 65.9 47.1 39.0 27.9

62.3M 62.9M
56.9M 34.3M 56.9M 62.3M 56.9M 62.3M 56.9M

33.0 57.9 34.4 18.3 25.4 41.9 36.2 60.6 38.2 20.6 37.4 46.1 37.3 58.5 39.7 19.7 42.8 50.1 35.1 54.8 37.6 15.0 38.9 51.5 33.5 52.4 35.6 14.4 37.6 47.6 31.8 52.9 33.6 12.0 35.5 46.1 33.8 52.9 36.9 14.6 37.0 47.7 33.8 54.2 35.9 16.2 37.1 47.4 38.4 60.6 41.6 22.1 41.8 47.6 31.7 51.0 33.8 12.5 35.1 47.9 36.2 56.6 38.7 19.0 39.9 48.8 29.6 49.6 31.1 10.6 32.0 44.9 29.4 49.2 31.3 10.0 32.0 44.4 25.7 43.9 26.2 6.9 27.7 42.6 38.0 60.0 40.8 19.7 41.4 49.9 34.6 53.0 36.9 31.0 55.3 32.3 15.2 33.2 42.8 36.6 58.1 39.0 16.2 39.5 50.9 35.1 52.5 37.8 17.0 38.5 49.5 28.2 51.5 29.7 11.9 30.6 43.4 33.4 54.0 35.1 11.8 35.3 50.9

Pelee [37] EFM (SAM) TTFNet [23] CenterNet [45] EFM (SAM) PRN [35]

PeleeNet [37] CSPPeleeNet ResNet18 [7] ResNet18 [7] CSPPeleeNet PeleeNet [37]

304×304 106 2.58 512×512 109 7.68 512×512 112 512×512 129 416×416 129 5.07 416×416 145 4.04

5.98M 4.31M
4.31M 3.16M

22.4 38.3 22.9 27.6 50.4 27.7 12.4 30.1 36.2 28.1 43.8 30.2 11.8 29.5 41.5 28.1 44.9 29.6 26.8 49.0 26.7 9.8 28.2 38.8 23.3 45.0 22.0 6.7 24.8 35.1

EFM (SAM) [35] CSPPeleeNet Ref. 320×320 205 3.43

ThunderNet [25] SNet535 [25]

320×320 214 2.60

EFM (SAM) [35] CSPDenseNet Ref. 320×320 235 2.89

ThunderNet [25] SNet146 [25]

320×320 248 0.95

ThunderNet [25] SNet49 [25]

320×320 267 0.52

PRN (3l) [35]

CSPPeleeNet Ref. 320×320 267 3.15

5.67M -
5.05M -
4.79M

23.5 44.6 22.7 7.1 23.6 36.1 28.0 46.2 29.5 21.7 42.2 20.6 6.3 21.3 33.3 23.6 40.2 24.5 19.1 33.7 19.6 19.4 40.0 17.0 5.8 18.8 31.1

PRN [35]

CSPPeleeNet Ref. 320×320 306 2.56

YOLOv3 (tiny) [29] DarkNet Ref. [29] 416×416 330 5.57

PRN [35]

CSPDenseNet Ref. 320×320 387 2.01

PRN [35]

DarkNet Ref. [29] 416×416 400 3.47

PRN [35]

CSPDenseNetb Ref. 320×320 400 1.59

4.59M 8.86M 3.97M 4.96M 1.87M

18.8 38.5 16.6 5.0 18.9 31.4 33.1
16.8 35.4 14.3 4.4 16.6 28.5 33.1
15.3 34.2 12.0 3.6 16.1 23.4

1 The table is separated into four parts, <100 fps, 100∼200 fps, 200∼300 fps, and >300 fps.
2 We mainly focus on FPS and AP50 since almost all applications need fast inference to locate and count objects. 3 Inference speed are tested on GTX 1080ti with batch size equals to 1 if possible, and our models are tested using Darknet [28].
4 All results are obtained by COCO test-dev set except for TTFNet [23] models which are veriﬁed on minval5k set.

than ThunderNet with SNet49. Besides, it gets 0.5% higher on AP50. If compared to ThunderNet146, CSPPeleeNet Reference with PRN (3l) increases the frame rate by 19 fps while maintaining the same level of AP50.
4.5 Analysis
Computational Bottleneck. Figure 7 shows the BLOPS of each layer of PeleeNet-YOLO, PeleeNet-PRN and proposed CSPPeleeNet-EFM. From Figure 7, it is obvious that the computational bottleneck of PeleeNet-YOLO occurs when the head integrates the feature pyramid. The computational bottleneck of PeleeNet-PRN occurs on the transition layers of the PeleeNet backbone. As to the proposed CSPPeleeNet-EFM, it can balance the overall computational bottleneck, which reduces the PeleeNet backbone 44% computational bottleneck and reduces PeleeNet-YOLO 80% computational bottleneck. Therefore, we can say that the proposed CSPNet can provide hardware with a higher utilization rate.
Memory Trafﬁc. Figure 8 shows the size of each layer of ResNeXt50 and the proposed CSPResNeXt50. The CIO of the proposed CSPResNeXt (32.6M) is lower than that of the original ResNeXt50 (34.4M). In addition, our
10

CSPNet: A New Backbone that can Enhance Learning Capability of CNN

A PREPRINT

Figure 7: Computational bottleneck of PeleeNet-YOLO, PeleeNet-PRN and CSPPeleeNet-EFM.
CSPResNeXt50 removes the bottleneck layers in the ResXBlock and maintains the same numbers of the input channel and the output channel, which is shown in Ma et al. [24] that this will have the lowest MAC and the most efﬁcient computation when FLOPs are ﬁxed. The low CIO and FLOPs enable our CSPResNeXt50 to outperform the vanilla ResNeXt50 by 22% in terms of computations.

Figure 8: Input size and output size of ResNeXt and proposed CSPResNeXt.
Inference Rate. We further evaluate whether the proposed methods are able to be deployed on real-time detectors with mobile GPU or CPU. Our experiments are based on NVIDIA Jetson TX2 and Intel Core i9-9900K, and the inference rate on CPU is evaluated with the OpenCV DNN module. We do not adopt model compression or quantization for fair comparisons. The results are shown in Table5.
If we compare the inference speed executed on CPU, CSPDenseNetb Ref.-PRN receives higher AP50 than SNet49TunderNet, YOLOv3-tiny, and YOLOv3-tiny-PRN, and it also outperforms the above three models by 55 fps, 48 fps, and 31 fps, respectively, in terms of frame rate. On the other hand, CSPPeleeNet Ref.-PRN (3l) reaches the same accuracy level as SNet146-ThunderNet but signiﬁcantly upgrades the frame rate by 20 fps on CPU.
If we compare the inference speed executed on mobile GPU, our proposed EFM will be a good model to use. Since our proposed EFM can greatly reduce the memory requirement when generating feature pyramids, it is deﬁnitely beneﬁcial to function under the memory bandwidth restricted mobile environment. For example, CSPPeleeNet Ref.-EFM (SAM) can have a higher frame rate than YOLOv3-tiny, and its AP50 is 11.5% higher than YOLOv3-tiny, which is signiﬁcantly
11

CSPNet: A New Backbone that can Enhance Learning Capability of CNN

A PREPRINT

Table 5: Inference rate on mobile GPU (mGPU) and CPU real-time object detectors (in fps).

Model

Size GPU CPU mGPU AP50

SNet146-Thunder [25] SNet49-Thunder [25]

320 248 32 320 267 47

- 40.2 - 33.7

YOLOv3-tiny [29] YOLOv3-tiny-PRN [35]

416 330 54 37 33.1 416 400 71 49 33.1

CSPPeleeNet Ref.-EFM (SAM) 320 205 CSPDenseNet Ref.-EFM (SAM) 320 235 -

41 44.6 49 42.2

CSPPeleeNet Ref.-PRN (3l) CSPPeleeNet Ref.-PRN CSPDenseNet Ref.-PRN CSPDenseNetb Ref.-PRN

320 267 52 38 40.0 320 306 75 52 38.5 320 387 95 64 35.4 320 400 102 73 34.2

upgraded. For the same CSPPeleeNet Ref. backbone, although EFM (SAM) is 62 fps slower than PRN (3l) on GTX 1080ti, it reaches 41 fps on Jetson TX2, 3 fps faster than PRN (3l), and at AP50 4.6% growth.
5 Conclusion
We have proposed the CSPNet that enables state-of-the-art methods such as ResNet, ResNeXt, and DenseNet to be light-weighted for mobile GPUs or CPUs. One of the main contributions is that we have recognized the redundant gradient information problem that results in inefﬁcient optimization and costly inference computations. We have proposed to utilize the cross-stage feature fusion strategy and the truncating gradient ﬂow to enhance the variability of the learned features within different layers. In addition, we have proposed the EFM that incorporates the Maxout operation to compress the features maps generated from the feature pyramid, which largely reduces the required memory bandwidth and thus the inference is efﬁcient enough to be compatible with edge computing devices. Experimentally, we have shown that the proposed CSPNet with the EFM signiﬁcantly outperforms competitors in terms of accuracy and inference rate on mobile GPU and CPU for real-time object detection tasks.
References
[1] Ping Chao, Chao-Yang Kao, Yu-Shan Ruan, Chien-Hsiang Huang, and Youn-Long Lin. HarDNet: A low memory trafﬁc network. Proceedings of the IEEE International Conference on Computer Vision (ICCV), 2019.
[2] Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li, and Li Fei-Fei. ImageNet: A large-scale hierarchical image database. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 248–255, 2009.
[3] Kaiwen Duan, Song Bai, Lingxi Xie, Honggang Qi, Qingming Huang, and Qi Tian. CenterNet: Keypoint triplets for object detection. In Proceedings of the IEEE International Conference on Computer Vision (ICCV), pages 6569–6578, 2019.
[4] Stefan Elfwing, Eiji Uchibe, and Kenji Doya. Sigmoid-weighted linear units for neural network function approximation in reinforcement learning. Neural Networks, 107:3–11, 2018.
[5] Shang-Hua Gao, Ming-Ming Cheng, Kai Zhao, Xin-Yu Zhang, Ming-Hsuan Yang, and Philip Torr. Res2Net: A new multi-scale backbone architecture. IEEE Transactions on Pattern Analysis and Machine Intelligence (TPAMI), 2020.
[6] Ian J Goodfellow, David Warde-Farley, Mehdi Mirza, Aaron Courville, and Yoshua Bengio. Maxout networks. In Proceedings of International Conference on Machine Learning (ICML), 2013.
[7] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recognition. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 770–778, 2016.
[8] Andrew Howard, Mark Sandler, Grace Chu, Liang-Chieh Chen, Bo Chen, Mingxing Tan, Weijun Wang, Yukun Zhu, Ruoming Pang, Vijay Vasudevan, et al. Searching for MobileNetV3. In Proceedings of the IEEE International Conference on Computer Vision (ICCV), 2019.
[9] Andrew G Howard, Menglong Zhu, Bo Chen, Dmitry Kalenichenko, Weijun Wang, Tobias Weyand, Marco Andreetto, and Hartwig Adam. MobileNets: Efﬁcient convolutional neural networks for mobile vision applications. arXiv preprint arXiv:1704.04861, 2017.
[10] Jie Hu, Li Shen, and Gang Sun. Squeeze-and-excitation networks. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 7132–7141, 2018.
[11] Gao Huang, Zhuang Liu, Laurens Van Der Maaten, and Kilian Q Weinberger. Densely connected convolutional networks. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 4700–4708, 2017.
[12] Seung-Wook Kim, Hyong-Keun Kook, Jee-Young Sun, Mun-Cheon Kang, and Sung-Jea Ko. Parallel feature pyramid network for object detection. In Proceedings of the European Conference on Computer Vision (ECCV), pages 234–250, 2018.
12

CSPNet: A New Backbone that can Enhance Learning Capability of CNN

A PREPRINT

[13] Hei Law and Jia Deng. CornerNet: Detecting objects as paired keypoints. In Proceedings of the European Conference on Computer Vision (ECCV), pages 734–750, 2018.
[14] Hei Law, Yun Teng, Olga Russakovsky, and Jia Deng. CornerNet-Lite: Efﬁcient keypoint based object detection. arXiv preprint arXiv:1904.08900, 2019.
[15] Kunpeng Li, Ziyan Wu, Kuan-Chuan Peng, Jan Ernst, and Yun Fu. Tell me where to look: Guided attention inference network. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 9215–9223, 2018.
[16] Shuai Li, Lingxiao Yang, Jianqiang Huang, Xian-Sheng Hua, and Lei Zhang. Dynamic anchor feature selection for single-shot object detection. In Proceedings of the IEEE International Conference on Computer Vision (ICCV), pages 6609–6618, 2019.
[17] Zeming Li, Chao Peng, Gang Yu, Xiangyu Zhang, Yangdong Deng, and Jian Sun. Light-Head R-CNN: In defense of two-stage object detector. arXiv preprint arXiv:1711.07264, 2017.
[18] Tsung-Yi Lin, Michael Maire, Serge Belongie, James Hays, Pietro Perona, Deva Ramanan, Piotr Dollár, and C Lawrence Zitnick. Microsoft COCO: Common objects in context. In Proceedings of the European Conference on Computer Vision (ECCV), pages 740–755, 2014.
[19] Songtao Liu, Di Huang, et al. Receptive ﬁeld block net for accurate and fast object detection. In Proceedings of the European Conference on Computer Vision (ECCV), pages 385–400, 2018.
[20] Shu Liu, Lu Qi, Haifang Qin, Jianping Shi, and Jiaya Jia. Path aggregation network for instance segmentation. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 8759–8768, 2018.
[21] Wei Liu, Dragomir Anguelov, Dumitru Erhan, Christian Szegedy, Scott Reed, Cheng-Yang Fu, and Alexander C Berg. SSD: Single shot multibox detector. In Proceedings of the European Conference on Computer Vision (ECCV), pages 21–37, 2016.
[22] Wei Liu, Andrew Rabinovich, and Alexander C Berg. ParseNet: Looking wider to see better. International Conference on Learning Representations (ICLR), 2016.
[23] Zili Liu, Tu Zheng, Guodong Xu, Zheng Yang, Haifeng Liu, and Deng Cai. Training-time-friendly network for real-time object detection. arXiv preprint arXiv:1909.00700, 2019.
[24] Ningning Ma, Xiangyu Zhang, Hai-Tao Zheng, and Jian Sun. ShufﬂeNetV2: Practical guidelines for efﬁcient cnn architecture design. In Proceedings of the European Conference on Computer Vision (ECCV), pages 116–131, 2018.
[25] Zheng Qin, Zeming Li, Zhaoning Zhang, Yiping Bao, Gang Yu, Yuxing Peng, and Jian Sun. ThunderNet: Towards real-time generic object detection. Proceedings of the IEEE International Conference on Computer Vision (ICCV), 2019.
[26] Prajit Ramachandran, Barret Zoph, and Quoc V Le. Searching for activation functions. arXiv preprint arXiv:1710.05941, 2017. [27] Joseph Redmon. Darknet: Open source neural networks in C. http://pjreddie.com/darknet/, 2013–2016. [28] Joseph Redmon, Alexey Bochkovskiy, and Stefano Sinigardi. Darknet: YOLOv3 - neural network for object detection.
https://github.com/AlexeyAB/darknet, 2019. [29] Joseph Redmon and Ali Farhadi. YOLOv3: An incremental improvement. arXiv preprint arXiv:1804.02767, 2018. [30] Hamid Rezatoﬁghi, Nathan Tsoi, JunYoung Gwak, Amir Sadeghian, Ian Reid, and Silvio Savarese. Generalized intersection
over union: A metric and a loss for bounding box regression. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 658–666, 2019. [31] Mark Sandler, Andrew Howard, Menglong Zhu, Andrey Zhmoginov, and Liang-Chieh Chen. MobileNetV2: Inverted residuals and linear bottlenecks. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 4510–4520, 2018. [32] Karen Simonyan and Andrew Zisserman. Very deep convolutional networks for large-scale image recognition. arXiv preprint arXiv:1409.1556, 2014. [33] Mingxing Tan, Bo Chen, Ruoming Pang, Vijay Vasudevan, Mark Sandler, Andrew Howard, and Quoc V Le. MNASnet: Platform-aware neural architecture search for mobile. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 2820–2828, 2019. [34] Mingxing Tan and Quoc V Le. EfﬁcientNet: Rethinking model scaling for convolutional neural networks. In Proceedings of International Conference on Machine Learning (ICML), 2019. [35] Chien-Yao Wang, Hong-Yuan Mark Liao, Ping-Yang Chen, and Jun-Wei Hsieh. Enriching variety of layer-wise learning information by gradient combination. Proceedings of the IEEE International Conference on Computer Vision Workshop (ICCV Workshop), 2019. [36] Huiyu Wang, Aniruddha Kembhavi, Ali Farhadi, Alan L Yuille, and Mohammad Rastegari. Elastic: Improving cnns with dynamic scaling policies. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 2258–2267, 2019. [37] Robert J Wang, Xiang Li, and Charles X Ling. Pelee: A real-time object detection system on mobile devices. In Advances in Neural Information Processing Systems (NeurIPS), pages 1963–1972, 2018. [38] Tiancai Wang, Rao Muhammad Anwer, Hisham Cholakkal, Fahad Shahbaz Khan, Yanwei Pang, and Ling Shao. Learning rich features at high-speed for single-shot object detection. In Proceedings of the IEEE International Conference on Computer Vision (ICCV), pages 1971–1980, 2019. [39] Saining Xie, Ross Girshick, Piotr Dollár, Zhuowen Tu, and Kaiming He. Aggregated residual transformations for deep neural networks. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 1492–1500, 2017. [40] Sergey Zagoruyko and Nikos Komodakis. Wide residual networks. In Proceedings of the British Machine Vision Conference (BMVC), 2016.
13

CSPNet: A New Backbone that can Enhance Learning Capability of CNN

A PREPRINT

[41] Shifeng Zhang, Longyin Wen, Xiao Bian, Zhen Lei, and Stan Z Li. Single-shot reﬁnement neural network for object detection. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 4203–4212, 2018.
[42] Xiaosong Zhang, Fang Wan, Chang Liu, Rongrong Ji, and Qixiang Ye. FreeAnchor: Learning to match anchors for visual object detection. In Advances in Neural Information Processing Systems (NeurIPS), 2019.
[43] Xiangyu Zhang, Xinyu Zhou, Mengxiao Lin, and Jian Sun. ShufﬂeNet: An extremely efﬁcient convolutional neural network for mobile devices. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 6848–6856, 2018.
[44] Qijie Zhao, Tao Sheng, Yongtao Wang, Zhi Tang, Ying Chen, Ling Cai, and Haibin Ling. M2det: A single-shot object detector based on multi-level feature pyramid network. In Proceedings of the AAAI Conference on Artiﬁcial Intelligence (AAAI), volume 33, pages 9259–9266, 2019.
[45] Xingyi Zhou, Dequan Wang, and Philipp Krähenbühl. Objects as points. In arXiv preprint arXiv:1904.07850, 2019.
[46] Ligeng Zhu, Ruizhi Deng, Michael Maire, Zhiwei Deng, Greg Mori, and Ping Tan. Sparsely aggregated convolutional networks. In Proceedings of the European Conference on Computer Vision (ECCV), pages 186–201, 2018.

14

